	

	INTR_FLAGS	   	equ word [ss:bp + 30]
	INTR_CS	       	equ word [ss:bp + 28]
	INTR_IP	       	equ word [ss:bp + 26]
	INTR_INTNUM	   	equ word [ss:bp + 24]
	INTR_DS	       	equ word [ss:bp + 22]
	INTR_ES	       	equ word [ss:bp + 20]
	INTR_FS	       	equ word [ss:bp + 18]
	INTR_GS	       	equ word [ss:bp + 16]
	INTR_AX	       	equ word [ss:bp + 14]
	INTR_CX	       	equ word [ss:bp + 12]
	INTR_DX	       	equ word [ss:bp + 10]
	INTR_BX       	equ word [ss:bp + 8 ]
	INTR_SP       	equ word [ss:bp + 6 ]
	INTR_BP       	equ word [ss:bp + 4 ]
	INTR_SI       	equ word [ss:bp + 2 ]
	INTR_DI       	equ word [ss:bp + 0 ]  
	
	dosinit:
		int			0x12
		shl			ax, 	6
		mov			[__PSP.mem_top_seg], ax  

; Point to INT21H patch table (assume CS = 0)
		mov			[cs:0xFF*4 + 0], word 0
		mov			[cs:0xFF*4 + 2], word INT21H_TABLE/16

; Setup dispatch table
		cld	
		xor			ax,		ax
		mov			es,		ax				

		mov			cx,		0x80
		mov			di,		INT21H_TABLE

	.fill_tbl:
		mov			ax, 	__dos_not_impl
		stosw
		xor			ax, 	ax
		stosw		
		loop		.fill_tbl

	; Setup functions 0x30 and 0x4a
		
		mov			[cs:INT21H_TABLE + 0x30*4], word __dos_fun_30
	  mov			[cs:INT21H_TABLE + 0x40*4], word __dos_fun_40
		mov			[cs:INT21H_TABLE + 0x44*4], word __dos_fun_44
		mov			[cs:INT21H_TABLE + 0x4A*4], word __dos_fun_4a
		mov			[cs:INT21H_TABLE + 0x63*4], word __dos_fun_63

	; Setup IVT entries 0x20..0x2F
		mov			cx,		0x10
		mov			di,		0x20*4

	.fill_ivt:
		mov			ax, 	__dos_not_impl
		stosw
		xor			ax,		ax
		stosw
		loop		.fill_ivt

	; Setup IVT entry for INT 0x21 
		mov			[cs:0x21*4 + 0], word __dos_21h
		mov			[cs:0x21*4 + 2], word 0
	  ret

; ---------------------------
; DOS write to file or device
; ---------------------------

	__dos_fun_40:
		mov			bx,		INTR_BX
		cmp			bx,		1
		jnz			.invalid
		mov			ds, 	INTR_DS
		mov			si, 	INTR_DX
		mov			cx,		INTR_CX
		cld
	.prn:
		xor			bx,		bx
		lodsb
		mov			ah, 	0xe
		int			0x10
		loop		.prn
		mov			ax,		INTR_CX
		mov			INTR_AX, ax
		and			INTR_FLAGS, 0xfffe 
		retf
	.invalid:
		mov			INTR_AX, 0x6
		or			INTR_FLAGS, 1
		retf

; ---------------------------
; DOS get device information
; ---------------------------

	__dos_fun_44:
		mov			ax,		INTR_AX
		or			al,		al
		mov			si,		3
		jnz			__halt
		mov			bx,		INTR_BX
		dec     bx
		cmp			bx, 	1
		ja			.invalid
		add			bx,		bx
		mov			ax,		[cs:.flags + bx]
		mov			INTR_DX, ax
		mov			INTR_AX, ax
		and			INTR_FLAGS, 0xfffe
		retf
	.invalid:
		or			INTR_FLAGS, 1
		mov			ax,		0x6
		retf
	.flags:	
		dw			0x82
		dw 			0x81

; ---------------------------
; DOS resize memory block
; ---------------------------

	__dos_fun_4a:	
		or			INTR_FLAGS, 1
		mov			INTR_AX, 0x9
		xor			INTR_ES, __PSP/16
		jnz			.exit ; Invalid seg
		mov			INTR_AX, 0x8
		mov			bx,		[cs:__PSP.mem_top_seg]
		sub     bx, 	INTR_ES
		xchg		INTR_BX, bx
		cmp			bx,		INTR_BX
		ja			.exit ; Out of memory
		xor			INTR_FLAGS, 1
		mov			INTR_AX, 0x0
	.exit:
		retf

; ---------------------------
; DOS get version
; ---------------------------

	__dos_fun_30:		
		mov			bx, 	0xfd2b
		mov 		ax,		INTR_AX
		or			al, 	al
		jz			.novflags
		xor			bh, 	bh	
	.novflags:
		mov			INTR_BX, bx
		mov			INTR_AX, 0x1606
		and			INTR_FLAGS, 0xfffe
		retf

; -------------------------------
; DOS get lead byte table address
; -------------------------------

	__dos_fun_63:
		mov			INTR_DS, cs		
		mov			INTR_SI, .dbcs
		and			INTR_FLAGS, 0xfffe
		retf
	.dbcs:
		dd			0

; ---------------------------
; DOS interrupt entry point
; ---------------------------

	__dos_intr:
		push 		ds
		push 		es
		push		fs
		push		gs		
		pusha

		mov			bp,		sp
		cmp			INTR_INTNUM, 0x21
		mov			si,		2
		jnz			__halt

		test		ah,		0x80
		mov			si,		1
		jnz			__halt

		mov			si,		ax
		shr			si,		8
		shl			si,		2

		mov			dx, 	ss		
		mov			ax, 	sp
		
		call		far [cs:INT21H_TABLE + si]

		popa	
		pop			gs
		pop			fs
		pop			es
		pop			ds
		add			sp,		2		
		iret

	__dos_term:
		xchg		bx,		bx
		int 		0x22
		retf

	__dos_cbrk:
		xchg		bx,		bx
		int 		0x23
		retf	

	__dos_cerr:
		xchg		bx,		bx
		int 		0x24
		retf	

	__dos_not_impl:
		popa	
		pop			gs
		pop			fs
		pop			es
		pop			ds
		add			sp,		2
		xor			bx,		bx
		cli
		hlt

; ---------------------------
; DOS stubs
; ---------------------------

	__dos_21h:
		push 		word 0x21
		jmp			__dos_intr



  
