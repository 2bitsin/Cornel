	execute_mz:
		cld

		mov			bp,		sp
		sub			bp,		0x100
		and			bp,   0xFFF0
		xchg		bp,		sp

		mov			di, 	ss
		mov			es, 	di		
		mov			di,		sp

		xor			si,		si
		mov			ds,		si
		mov			si, 	__payload/16
		mov			MZ_SEGMENT, si
		mov			si,		__payload
		
		mov			cx,		MZ_HEADERLEN
		shl			cx,		3

		rep			movsw

		mov			ax,		ss
		shl			ax,		4
		add			ax,		sp
		shr			ax, 	4
		mov			MZ_SEGMENT,	ax

		cmp			MZ_SIGNATURE, 0x5A4D
		jnz			__selfcheck_fail

		mov			di,		__payload/16
		mov			es,		di
		xor			di,		di

		mov			si, 	__payload/16
		add			si,		MZ_HEADERLEN
		mov			ds,		si
		xor			si,		si

		mov			cx,		MZ_SIZEPAGES
		shl			cx,		9
		add			cx,		MZ_REMAINDER
		shr			cx,		1

		rep			movsw
		
		mov			bx, 	MZ_RELOCOFFS		
		mov			cx, 	MZ_RELOCSIZE
		
	.patch_reloc:
		
	; Compute the segment to be patched
		mov			ax,		[MZ_SEGMENT:bx + 2]
		add     ax,		__payload / 16			
		mov			fs, 	ax

	; Get the offset to be patched
		push		bx
		mov			bx,		[MZ_SEGMENT:bx]

	; Patch the relocation
		mov			ax, 	[fs:bx]
		add			ax,		__payload / 16
		mov			[fs:bx],ax

	; Restore bx
		pop			bx
		add			bx,		4
		dec			cx
		jnz			.patch_reloc

	; Done patching, setup environment
		mov			ax,		__PSP / 16
		mov			ds,		ax
		mov			es, 	ax

		mov			ax, 	MZ_INITIALSS
		add			ax,		__payload / 16		
		mov			ss,		ax
		mov			sp,		MZ_INITIALSP

	; RETF to initial CS:IP
		mov			ax, 	MZ_INITIALCS
		add			ax, 	__payload / 16
		push		ax
		mov			ax, 	MZ_INITIALIP
		push		ax
		mov			ax,		0xffff
		retf		
